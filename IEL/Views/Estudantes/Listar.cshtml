@*
    For more information on enabling MVC for empty projects, visit https://go.microsoft.com/fwlink/?LinkID=397860
*@
@{
    @model List<IEL.Models.Entities.Estudante>
}

<h1>Lista de Estudantes</h1>

<a href="@Url.Action("Novo", "Estudantes")" class="btn btn-primary">Novo</a>

<table class="table">
    <thead>
        <tr>
            <th>Nome</th>
            <th>CPF</th>
            <th>Endereço</th>
            <th>Data de Conclusão</th>
        </tr>
        <!-- Barra de pesquisa abaixo de cada th -->
        <tr>
            <th><input type="text" class="form-control" id="nomeFiltro" placeholder="Pesquisar Nome" /></th>
            <th><input type="text" class="form-control" id="cpfFiltro" placeholder="Pesquisar CPF" /></th>
            <th><input type="text" class="form-control" id="enderecoFiltro" placeholder="Pesquisar Endereço" /></th>
            <th><input type="text" class="form-control" id="dataFiltro" placeholder="Pesquisar Data" /></th>
        </tr>
    </thead>
    <tbody id="estudantesTabela">
		@foreach (var estudante in Model)
		{
			<tr>
				<td>@estudante.Nome</td>
				<td>@estudante.CPF</td>
				<td>@estudante.Endereco</td>
				<td>@estudante.DataConclusao.ToString("dd/MM/yyyy")</td>
                <td>
					<a href="@Url.Action("Editar", "Estudantes", new { id = estudante.Id })" class="btn btn-primary">Editar</a>
                    <button class="btn btn-danger delete-btn" data-id="@estudante.Id">Excluir</button>
                    <!-- Formulário de exclusão -->
                    <form id="delete-form-@estudante.Id" action="@Url.Action("Excluir", "Estudantes")" method="POST" style="display:none;">
                        <input type="hidden" name="Id" value="@estudante.Id" />
                    </form>
                </td>
			</tr>
		}
    </tbody>
</table>

<div id="overlay" 
     style="
        display: none; 
        position: fixed; 
        top: 0; 
        left: 0; 
        width: 100%; 
        height: 100%; 
        background-color: rgba(0, 0, 0, 0.5); 
        z-index: 1000;">
    <div style="
      position: absolute;
      top: 50%;
      left: 50%;
      transform: translate(-50%, -50%);
      background-color: white;
      padding: 30px;
      border-radius: 10px;
      box-shadow: 0 4px 6px rgba(0, 0, 0, 0.1);
      text-align: center;
      width: 300px;
    ">
        <h6 style="font-size: 18px; font-weight: bold; margin-bottom: 20px;">
            Tem certeza que deseja excluir este estudante?
        </h6>
        <div style="display: flex; justify-content: space-around; gap: 10px;">
            <button class="btn btn-danger confirmar-exclusao" style="flex: 1;">Sim</button>
            <button class="btn btn-primary cancel-exclusao" style="flex: 1;">Não</button>
        </div>
    </div>
</div>

<script>
    document.addEventListener('DOMContentLoaded', function () {
        const deleteButtons = document.querySelectorAll('.delete-btn');
        const overlay = document.getElementById('overlay');
        const yesButton = overlay.querySelector('.confirmar-exclusao');
        const noButton = overlay.querySelector('.cancel-exclusao');
        let studentToDelete = null;

        deleteButtons.forEach(button => {
            button.addEventListener('click', function () {
                const studentId = this.getAttribute('data-id');
                overlay.style.display = 'block';

                // Define o ID do estudante no botão "Sim"
                yesButton.setAttribute('data-id', studentId);
            });
        });

        noButton.addEventListener('click', function () {
            overlay.style.display = 'none';
        });

        yesButton.addEventListener('click', function () {
            const studentId = this.getAttribute('data-id');
            const form = document.getElementById(`delete-form-${studentId}`);

            // Submete o formulário para fazer a exclusão via POST
            form.submit();

            overlay.style.display = 'none';
        });
    });
</script>

<script>
    document.addEventListener('DOMContentLoaded', function () {
        // Captura os inputs de filtro
        const nomeFiltro = document.getElementById('nomeFiltro');
        const cpfFiltro = document.getElementById('cpfFiltro');
        const enderecoFiltro = document.getElementById('enderecoFiltro');
        const dataFiltro = document.getElementById('dataFiltro');

        // Captura a tabela de estudantes
        const tabelaEstudantes = document.getElementById('estudantesTabela');
        const estudantesLinhas = tabelaEstudantes.getElementsByTagName('tr');

        // Função para aplicar o filtro
        function aplicarFiltro() {
            for (let i = 0; i < estudantesLinhas.length; i++) {
                const linha = estudantesLinhas[i];
                const nome = linha.cells[0].textContent.toLowerCase();
                const cpf = linha.cells[1].textContent.toLowerCase();
                const endereco = linha.cells[2].textContent.toLowerCase();
                const data = linha.cells[3].textContent.toLowerCase();

                // Verifica se a linha deve ser exibida com base nos filtros
                const nomeMatch = nome.includes(nomeFiltro.value.toLowerCase());
                const cpfMatch = cpf.includes(cpfFiltro.value.toLowerCase());
                const enderecoMatch = endereco.includes(enderecoFiltro.value.toLowerCase());
                const dataMatch = data.includes(dataFiltro.value.toLowerCase());

                if (nomeMatch && cpfMatch && enderecoMatch && dataMatch) {
                    linha.style.display = '';
                } else {
                    linha.style.display = 'none';
                }
            }
        }

        // Adiciona eventos de input nos campos de filtro
        nomeFiltro.addEventListener('input', aplicarFiltro);
        cpfFiltro.addEventListener('input', aplicarFiltro);
        enderecoFiltro.addEventListener('input', aplicarFiltro);
        dataFiltro.addEventListener('input', aplicarFiltro);
    });
</script>